#For this project, I downloaded the the Top 50 Songs for 2021 in Spotify through Kaggle. 
#Then, I created a table to insert the Spotify data into.
#Finally, I performed analytics on the data using SQL.

/*Creating the Spotify Table*/
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#I imported + inserted the downloaded Spotify Data .cvs file into the table. 
#Next, I explored the data using the following SQL. 

/*Who are the top 10 artists?*/
SELECT 
artist_name,
track_name, 
popularity
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

/*What is the longest song?*/
SELECT 
artist_name, 
track_name, 
duration_ms
FROM Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

/*What is the shortest song?*/
SELECT 
artist_name, 
track_name, 
duration_ms
FROM Spotifydata
ORDER BY duration_ms ASC
LIMIT 1;

/*What is the average duration of the songs in minutes?*/
SELECT 
ROUND((AVG(duration_ms)/60000),2) AS 'Average Length in Minutes'
FROM Spotifydata; 

/*Which songs fall above or below the average duration in minutes?*/
SELECT 
artist_name,
track_name,
    CASE 
        WHEN (duration_ms/60000) > (SELECT ROUND((AVG(duration_ms)/60000),2) FROM Spotifydata) THEN "Longer than Average"
        WHEN (duration_ms/60000) < (SELECT ROUND((AVG(duration_ms)/60000),2) FROM Spotifydata) THEN "Shorter than Average"
        ELSE "NOR ABOVE OR BELOW"
    END AS "Averaging Duration"
FROM Spotifydata
GROUP BY artist_name,track_name;
   
/*How many songs fall above or below the average duration in minutes?*/     
SELECT 
COUNT (*) AS "Duration in Minutes",
    CASE 
        WHEN (duration_ms/60000) > (SELECT ROUND((AVG(duration_ms)/60000),2) FROM Spotifydata) THEN "Longer than Average"
        WHEN (duration_ms/60000) < (SELECT ROUND((AVG(duration_ms)/60000),2) FROM Spotifydata) THEN "Shorter than Average"
        ELSE "NOR ABOVE OR BELOW"
    END AS Averaging_Duration
FROM Spotifydata
GROUP BY Averaging_Duration;

/*Which songs contain instrumenalness?*/
SELECT 
artist_name,
track_name,
    CASE 
        WHEN instrumentalness > 0 THEN "YES"
        WHEN instrumentalness = 0 THEN "NO"
        ELSE "NULL"
    END AS Instrumentalness
FROM Spotifydata
GROUP BY artist_name,track_name;

/*How many songs contain instrumentalness?*/
SELECT 
COUNT(CASE WHEN instrumentalness > 0 THEN 1 END) AS "Songs with Instrumentalnes"
FROM Spotifydata
WHERE Instrumentalness > 0;

/*Using a CTE to aggregate the artists who have an average popularity greater than or equal to 90 and labelled as Top Star*/
WITH average_popularity_CTE AS(
SELECT 
S.artist_name,
AVG(S.popularity) AS average_popularity
FROM Spotifydata S
GROUP BY S.artist_name
)

SELECT 
artist_name,
average_popularity,
'Top Star' AS tag
FROM average_popularity_CTE
WHERE average_popularity >=90; 



